import http from "http";
import fs from "fs/promises";
import { existsSync, mkdirSync, unlinkSync } from "fs";
import { Command } from "commander";
import superagent from "superagent";




const program = new Command();
program
  .requiredOption("-h, --host <host>", "–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  .requiredOption("-p, --port <port>", "–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞")
  .requiredOption("-c, --cache <cache>", "—à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–µ—à—É");
program.parse(process.argv);

const { host, port, cache } = program.opts();

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É
if (!existsSync(cache)) {
  mkdirSync(cache, { recursive: true });
  console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∫–µ—à—É: ${cache}`);
} else {
  console.log(`üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ—Å–Ω—É—é—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∫–µ—à—É: ${cache}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É –≤ –∫–µ—à—ñ
const getCachePath = (code) => `${cache}/${code}.jpg`;

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(async (req, res) => {
  const urlPath = req.url.slice(1); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ "/"
  const filePath = getCachePath(urlPath);

  switch (req.method) {
   case "GET":
  try {
    // 1) —á–∏—Ç–∞—î–º–æ –∑ –∫–µ—à—É
    const data = await fs.readFile(filePath);
    res.writeHead(200, { "Content-Type": "image/jpeg" });
    res.end(data);
  } catch {
    // 2) —è–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ ‚Äî –±–µ—Ä–µ–º–æ –∑ http.cat
    try {
      const response = await superagent
        .get(`https://http.cat/${urlPath}`)
        .buffer(true)
        .parse(superagent.parse.image);

      const imageBuffer = response.body; // Buffer
      await fs.writeFile(filePath, imageBuffer); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      res.writeHead(200, { "Content-Type": "image/jpeg" });
      res.end(imageBuffer);
    } catch {
      // 3) —è–∫—â–æ —ñ —Ç–∞–º –Ω–µ–º–∞ ‚Äî 404
      res.writeHead(404, { "Content-Type": "text/plain" });
      res.end("404 Not Found: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ http.cat");
    }
  }
  break;


    case "PUT":
      try {
        const chunks = [];
        for await (const chunk of req) chunks.push(chunk);
        const body = Buffer.concat(chunks);
        await fs.writeFile(filePath, body);
        res.writeHead(201, { "Content-Type": "text/plain" });
        res.end("Created: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
      } catch {
        res.writeHead(500, { "Content-Type": "text/plain" });
        res.end("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É");
      }
      break;

    case "DELETE":
      try {
        unlinkSync(filePath);
        res.writeHead(200, { "Content-Type": "text/plain" });
        res.end("OK: –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ");
      } catch {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("404 Not Found: –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
      }
      break;

    default:
      res.writeHead(405, { "Content-Type": "text/plain" });
      res.end("405 Method Not Allowed");
  }
});

server.listen(port, host, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://${host}:${port}`);
});
